name: Temperature Monitor CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov python-dotenv

    - name: Create test environment file
      run: |
        cat > .env << EOF
        SWITCHBOT_TOKEN=test_token_for_ci
        SWITCHBOT_SECRET=test_secret_for_ci
        LIVING_ROOM_MAC=TEST_MAC_001
        BEDROOM_MAC=TEST_MAC_002
        OFFICE_MAC=TEST_MAC_003
        OUTDOOR_MAC=TEST_MAC_004
        TEMPERATURE_INTERVAL=60
        EOF

    - name: Run Django system checks
      run: |
        python manage.py check --settings=temperature.test_settings

    - name: Run migrations check
      run: |
        python manage.py makemigrations --check --dry-run --settings=temperature.test_settings

    - name: Run Django tests
      run: |
        python manage.py test --settings=temperature.test_settings --verbosity=2

    - name: Run pytest with coverage
      run: |
        pytest --cov=homepage --cov=scripts --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov (if available)
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install safety bandit

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check

    - name: Run bandit security scan
      run: |
        bandit -r homepage/ scripts/ temperature/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json
      env:
        NODE_TLS_REJECT_UNAUTHORIZED: 0

  code-quality:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install code quality tools
      run: |
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run flake8
      run: |
        flake8 homepage/ scripts/ temperature/ --max-line-length=88 --exclude=migrations

    - name: Check code formatting with black
      run: |
        black --check homepage/ scripts/ temperature/

    - name: Check import sorting with isort
      run: |
        isort --check-only homepage/ scripts/ temperature/

    - name: Run type checking with mypy
      run: |
        mypy homepage/ scripts/ temperature/ --ignore-missing-imports || true

  deploy-staging:
    runs-on: [self-hosted, windows]
    needs: [test, security-scan, code-quality]
    if: |
      contains(github.head_ref, 'feature/') || contains(github.head_ref, 'bugfix/')
    environment:
      name: staging
      url: https://staging.temperature-monitor.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables for staging (Windows)
      shell: pwsh
      run: |
        Write-Output "üîß Setting environment variables for Docker Compose..."
        # Set environment variables for docker-compose to use
        $env:SWITCHBOT_TOKEN = "${{ secrets.SWITCHBOT_TOKEN }}"
        $env:SWITCHBOT_SECRET = "${{ secrets.SWITCHBOT_SECRET }}"
        $env:LIVING_ROOM_MAC = "${{ secrets.LIVING_ROOM_MAC }}"
        $env:BEDROOM_MAC = "${{ secrets.BEDROOM_MAC }}"
        $env:OFFICE_MAC = "${{ secrets.OFFICE_MAC }}"
        $env:OUTDOOR_MAC = "${{ secrets.OUTDOOR_MAC }}"
        $env:TEMPERATURE_INTERVAL = "60"
        $env:ENVIRONMENT = "preprod"
        $env:DATABASE_PATH = "/app/data/db.sqlite3"

        # Export variables for subsequent steps
        echo "SWITCHBOT_TOKEN=${{ secrets.SWITCHBOT_TOKEN }}" >> $env:GITHUB_ENV
        echo "SWITCHBOT_SECRET=${{ secrets.SWITCHBOT_SECRET }}" >> $env:GITHUB_ENV
        echo "LIVING_ROOM_MAC=${{ secrets.LIVING_ROOM_MAC }}" >> $env:GITHUB_ENV
        echo "BEDROOM_MAC=${{ secrets.BEDROOM_MAC }}" >> $env:GITHUB_ENV
        echo "OFFICE_MAC=${{ secrets.OFFICE_MAC }}" >> $env:GITHUB_ENV
        echo "OUTDOOR_MAC=${{ secrets.OUTDOOR_MAC }}" >> $env:GITHUB_ENV
        echo "TEMPERATURE_INTERVAL=60" >> $env:GITHUB_ENV
        echo "ENVIRONMENT=preprod" >> $env:GITHUB_ENV
        echo "DATABASE_PATH=/app/data/db.sqlite3" >> $env:GITHUB_ENV

        Write-Output "‚úÖ Environment variables set successfully"

    - name: Stop existing containers (Windows)
      shell: pwsh
      run: |
        try {
          docker-compose -f ci/docker-compose.preprod.yml down
          Write-Output "‚úÖ Stopped existing containers"
        } catch {
          Write-Output "‚ÑπÔ∏è No existing containers to stop"
        }

    - name: Clean up old images (Windows)
      shell: pwsh
      run: |
        try {
          docker system prune -f
          Write-Output "‚úÖ Cleaned up old Docker images"
        } catch {
          Write-Output "‚ÑπÔ∏è Docker cleanup completed with warnings"
        }

    - name: Deploy to staging (Windows)
      shell: pwsh
      run: |
        Write-Output "üöÄ Deploying to staging environment on Windows host machine"
        docker-compose -f ci/docker-compose.preprod.yml up --build -d

        if ($LASTEXITCODE -eq 0) {
          Write-Output "‚úÖ Docker containers started successfully"
        } else {
          Write-Output "‚ùå Failed to start Docker containers"
          exit 1
        }

    - name: Wait for services to be ready (Windows)
      shell: pwsh
      run: |
        Write-Output "‚è≥ Waiting for services to start..."
        Start-Sleep -Seconds 30
        Write-Output "‚úÖ Wait period completed"

    - name: Health check (Windows)
      shell: pwsh
      run: |
        Write-Output "üîç Checking service health..."

        # Check container status
        docker-compose -f ci/docker-compose.preprod.yml ps

        # Check if Django app is responding
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:7070/" -TimeoutSec 10 -UseBasicParsing
          if ($response.StatusCode -eq 200) {
            Write-Output "‚úÖ Django app is responding on port 7070"
          }
        } catch {
          Write-Output "‚ö†Ô∏è Django app not ready yet: $($_.Exception.Message)"
        }

        # Check daemon container status
        try {
          $daemonStatus = docker-compose -f ci/docker-compose.preprod.yml exec -T temperature-daemon ps aux
          if ($daemonStatus -match "temperature_daemon") {
            Write-Output "‚úÖ Temperature daemon is running"
          } else {
            Write-Output "‚ö†Ô∏è Temperature daemon status unclear"
          }
        } catch {
          Write-Output "‚ö†Ô∏è Could not check daemon status: $($_.Exception.Message)"
        }

        # Check daemon status file if accessible
        try {
          $statusFile = docker-compose -f ci/docker-compose.preprod.yml exec -T temperature-daemon cat /app/data/daemon_status.json 2>$null
          if ($statusFile) {
            Write-Output "‚úÖ Daemon status file accessible"
          }
        } catch {
          Write-Output "‚ÑπÔ∏è Daemon status file check skipped"
        }

        Write-Output "‚úÖ Staging deployment complete on Windows host"
        Write-Output "üåê Access your application at: http://localhost:7070"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        echo "This would typically involve:"
        echo "  - Building Docker image with production tag"
        echo "  - Pushing to container registry"
        echo "  - Updating production deployment"
        echo "  - Running health checks"
        echo "  - Notifying team of deployment"