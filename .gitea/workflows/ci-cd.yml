name: Temperature Monitor CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov python-dotenv
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        SWITCHBOT_TOKEN=test_token_for_ci
        SWITCHBOT_SECRET=test_secret_for_ci
        LIVING_ROOM_MAC=TEST_MAC_001
        BEDROOM_MAC=TEST_MAC_002
        OFFICE_MAC=TEST_MAC_003
        OUTDOOR_MAC=TEST_MAC_004
        TEMPERATURE_INTERVAL=60
        EOF
    
    - name: Run Django system checks
      run: |
        python manage.py check --settings=temperature.test_settings
    
    - name: Run migrations check
      run: |
        python manage.py makemigrations --check --dry-run --settings=temperature.test_settings
    
    - name: Run Django tests
      run: |
        python manage.py test --settings=temperature.test_settings --verbosity=2
    
    - name: Run pytest with coverage
      run: |
        pytest --cov=homepage --cov=scripts --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov (if available)
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check
    
    - name: Run bandit security scan
      run: |
        bandit -r homepage/ scripts/ temperature/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install code quality tools
      run: |
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run flake8
      run: |
        flake8 homepage/ scripts/ temperature/ --max-line-length=88 --exclude=migrations
    
    - name: Check code formatting with black
      run: |
        black --check homepage/ scripts/ temperature/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only homepage/ scripts/ temperature/
    
    - name: Run type checking with mypy
      run: |
        mypy homepage/ scripts/ temperature/ --ignore-missing-imports || true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "This would typically involve:"
        echo "  - Building Docker image"
        echo "  - Pushing to container registry" 
        echo "  - Updating staging deployment"
        echo "  - Running smoke tests"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "This would typically involve:"
        echo "  - Building Docker image with production tag"
        echo "  - Pushing to container registry"
        echo "  - Updating production deployment"
        echo "  - Running health checks"
        echo "  - Notifying team of deployment"